# -*- coding: utf-8 -*-
"""3-3 특성 공학과 규제_2023312822 유선아

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rru6mqog88e3-vqZQhfSk0wN28z3hBZ1

# 특성 공학과 규제
- 특성 공학 : 기존의 특성을 사용해 새로운 특성을 뽑아내는 작업

<table align="left">
  <td>
    <a target="_blank" href="https://colab.research.google.com/github/rickiepark/hg-mldl/blob/master/3-3.ipynb"><img src="https://www.tensorflow.org/images/colab_logo_32px.png" />구글 코랩에서 실행하기</a>
  </td>
</table>

## 데이터 준비
"""

import pandas as pd
# 판다스는 유명한 데이터 분석 라이브러리
# 데이터프레임=판다스의 핵심 데이터 구조

df = pd.read_csv('https://bit.ly/perch_csv_data')
# 데이터 내려받기, 컴퓨터에 있는 파일 업로드 가능
# csv 파일을 read_csv() 함수로 데이터프레임화
# csv : , 로 구분된 file (), () / tsv : tab으로 구분된 file ()  ()

perch_full = df.to_numpy()
# to_numpy() 메서드를 통해 넘파이 배열로 변경

print(perch_full)
# perch_full 출력 (1열: length, 2열: height, 3열: width)

import numpy as np

perch_weight = np.array(
    [5.9, 32.0, 40.0, 51.5, 70.0, 100.0, 78.0, 80.0, 85.0, 85.0,
     110.0, 115.0, 125.0, 130.0, 120.0, 120.0, 130.0, 135.0, 110.0,
     130.0, 150.0, 145.0, 150.0, 170.0, 225.0, 145.0, 188.0, 180.0,
     197.0, 218.0, 300.0, 260.0, 265.0, 250.0, 250.0, 300.0, 320.0,
     514.0, 556.0, 840.0, 685.0, 700.0, 700.0, 690.0, 900.0, 650.0,
     820.0, 850.0, 900.0, 1015.0, 820.0, 1100.0, 1000.0, 1100.0,
     1000.0, 1000.0]
     )
# 넘파이 배열의 농어의 무게 (y)

from sklearn.model_selection import train_test_split

train_input, test_input, train_target, test_target = train_test_split(perch_full, perch_weight, random_state=42)
# 훈련 세트와 테스트 세트로 나눔

"""## 사이킷런의 변환기

사이킷런에서 특성을 만들거나 전처리하기 위한 다양한 클래스(=변환기) 제공 (-> 다중회귀를 위해 사용할 수 있는 기능
"""

from sklearn.preprocessing import PolynomialFeatures
# 변환기(transformer) PolynomialFeatures import

poly = PolynomialFeatures()
# PolynomialFeatures 클래스 객체 선언

poly.fit([[2, 3]])
# 2개의 특성 2와 3으로 이루어진 샘플 [2,3]으로 훈련 예시
# fit 메서드는 새롭게 만들 특성 조합을 찾음

print(poly.transform([[2, 3]]))
# 새롭게 만들어진 특성 조합 출력
# transform 메서드는 실제로 데이터 변환
# degree=2(기본값), (n+d)!/n!d! => d=2, n=2, 6 조합

poly = PolynomialFeatures(include_bias=False)
# 선형방정식은 언제나 절편(bias) 존재
# include_bias=False로 특성 1 제거

poly.fit([[2, 3]])
print(poly.transform([[2, 3]]))
# 절편을 위한 항(1) 제거되고, 특성의 제곱과 특성끼리 곱한 항만 남도록

poly = PolynomialFeatures(include_bias=False)

poly.fit(train_input)
# train_input으로 훈련

train_poly = poly.transform(train_input)
# 절편을 위한 항(1) 제거되고, 특성의 제곱과 특성끼리 곱한 항만 남도록

print(train_poly.shape)
# x data feature 원래 3개
# 새로운 특성 조합으로 구성된 train_poly shape -> 9개의 특성을 가짐

poly.get_feature_names_out()
# 9개 특성이 어떻게 만들어졌는지 확인
# d=2, n=3 -> 10 - 1(절편항 제거) = 9 특성

test_poly = poly.transform(test_input)
# 절편을 위한 항(1) 제거되고, 특성의 제곱과 특성끼리 곱한 항만 남도록
# 테스트 세트 변환 (fit 함수는 train 데이터만 사용)

"""## 다중 회귀 모델 훈련하기"""

from sklearn.linear_model import LinearRegression

lr = LinearRegression()
# LinearRegression 클래스 import

lr.fit(train_poly, train_target)
# 모델 훈련

print(lr.score(train_poly, train_target))
# 훈련 세트에 대한 score 출력
# feature 종류(조합) 추가한 다중회귀모델 - 보다 강력함

print(lr.score(test_poly, test_target))
# 테스트 세트에 대한 score 출력
# underfitting 해결

poly = PolynomialFeatures(degree=5, include_bias=False)
# degree=5를 통해 5제곱까지 특성 생성

poly.fit(train_input)
train_poly = poly.transform(train_input)
test_poly = poly.transform(test_input)

print(train_poly.shape)
# d=5, n=3 -> 56 - 1(절편항 제거) = 55개의 특성 생성

lr.fit(train_poly, train_target)
print(lr.score(train_poly, train_target))
# 훈련 세트에서는 완벽한 성능을 보임

print(lr.score(test_poly, test_target))
# 테스트 세트에서는 좋지 않은 성능을 보임
# 과대 적합 overfitting <- feature 조합 과도하게 많아서

"""## 규제"""

from sklearn.preprocessing import StandardScaler
# 선형 회귀 모델에 규제 적용할 때, 계수 값의 크기가 서로 많이 다르면 공정한 제어 X
# standardscaler -> 평균 0, 분산 1 되도록 설정

ss = StandardScaler()
# StandardScaler() 객체 생성

ss.fit(train_poly)
# PolynomialFeatures 클래스로 만든 train_poly로 객체 훈련

train_scaled = ss.transform(train_poly)
# 표준점수로 변환한 train_scale

test_scaled = ss.transform(test_poly)
# 표준점수로 변환한 test_scale

"""## 릿지"""

from sklearn.linear_model import Ridge
# Ridge를 import

ridge = Ridge()
# 객체 생성
# alpha=1(default)

ridge.fit(train_scaled, train_target)
# 모델 훈련

print(ridge.score(train_scaled, train_target))
# 훈련 세트 점수 출력

print(ridge.score(test_scaled, test_target))
# 테스트 세트 점수 출력
# 이전에 비해 overfitting 완화되어 좋은 성능 보임

# 젹졀한 alpha 값 찾기 위해 R^2값 그래프 그리기
import matplotlib.pyplot as plt

train_score = []
test_score = []
# alpha 값 바꿀 때마다 score() 메서드의 결괏값 저장할 리스트 생성

alpha_list = [0.001, 0.01, 0.1, 1, 10, 100]
# 0.001~100까지 10배씩 늘려가며 릿지 회귀 모델 훈련

for alpha in alpha_list:
    ridge = Ridge(alpha=alpha)
    # 릿지 모델을 만듭니다
    ridge.fit(train_scaled, train_target)
    # 릿지 모델을 훈련합니다
    train_score.append(ridge.score(train_scaled, train_target))
    test_score.append(ridge.score(test_scaled, test_target))
    # 훈련 점수와 테스트 점수를 저장합니다

plt.plot(np.log10(alpha_list), train_score)
plt.plot(np.log10(alpha_list), test_score)
# 10배씩 alpha값을 늘려주었기에 log 사용해서 동일한 간격으로 나태내어 시각화함

plt.xlabel('alpha')
plt.ylabel('R^2')
plt.show()
# 왼쪽: 과대적합 overfitting(test 데이터 점수 낮음)
# 오른쪽: 과소적합 underfitting(train, test 데이터 둘다 점수 낮아지고 있음)
# 최적의 alpha는 log10x=-1, x=10^(-1)=0.1

ridge = Ridge(alpha=0.1)
# 적절한 alpha 값은 두 그래프가 가장 가깝고 테스트 점수가 높은 0.1

ridge.fit(train_scaled, train_target)

print(ridge.score(train_scaled, train_target))
print(ridge.score(test_scaled, test_target))
# 훈련 세트와 테스트 세트 점수 출력

"""## 라쏘"""

from sklearn.linear_model import Lasso
# Lasso를 import

lasso = Lasso()
# 객체 생성

lasso.fit(train_scaled, train_target)
# 모델 훈련

print(lasso.score(train_scaled, train_target))
# 훈련 세트 점수 출력

print(lasso.score(test_scaled, test_target))
# 테스트 세트 점수 출력
# 규제 가하지 않았을 때보다 overfitting 없어짐

train_score = []
test_score = []

alpha_list = [0.001, 0.01, 0.1, 1, 10, 100]
for alpha in alpha_list:
    # 라쏘 모델을 만듭니다
    lasso = Lasso(alpha=alpha, max_iter=10000)
    # 라쏘 모델을 훈련합니다
    # 사이킷런의 라쏘 모델은 최적의 계수를 찾기 위해 반복적인 계산을 하는데, 지정한 반복횟수가 부족할 때 경고가 뜰 수 있어서 max_iter=10000 설정
    lasso.fit(train_scaled, train_target)
    # 훈련 점수와 테스트 점수를 저장합니다
    train_score.append(lasso.score(train_scaled, train_target))
    test_score.append(lasso.score(test_scaled, test_target))

plt.plot(np.log10(alpha_list), train_score)
plt.plot(np.log10(alpha_list), test_score)
# alpha_list에 있는 6개의 값을 동일한 간격으로 나타내기 위해 log

plt.xlabel('alpha')
plt.ylabel('R^2')
plt.show()
# 후반부로 갈수록 과소적합 underfitting
# 라쏘 모델의 최적의 alpha 값 -> log10=1, alpha=10

lasso = Lasso(alpha=10)
# 적절한 alpha값은 두 그래프가 가장 가깝고 테스트 점수가 높은 10
lasso.fit(train_scaled, train_target)

print(lasso.score(train_scaled, train_target))
print(lasso.score(test_scaled, test_target))
# 훈련 세트와 테스트 세트 점수 출력

print(np.sum(lasso.coef_ == 0))
# 라쏘 모델은 계수값을 0으로도 만들 수 있음
# 새로 생성된 feature 55개 중 40개의 계수가 0
# 라쏘 모델이 사용한 특성은 15개 -> 라쏘는 유용한 특성을 골라내는 용도로 사용